{
	// Place your restaurant_template workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"runMiddleware": {
		"prefix": "runMiddleware",
		"body": [
			"const ${1:functionName} = (req, res, fn) => {",
			"return new Promise((resolve, reject) => {",
			"fn(req, res, (result) => {",
			"if (result instanceof Error) {",
			"return reject(result);",
			"}",
			"return resolve(result);",
			"});",
			"});",
			"};",
		]
	},
	"autoGrid": {
		"prefix": [
			"autoGrid",
			"autogrid",
			"RAM"
		],
		"description": "One line autofit grid",
		"body": [
			"width: '100%',",
			"display: 'grid',",
			"gridColumnGap: '10px',",
			"gridTemplateColumns: 'repeat(auto-fit, minmax(80px, 1fr))',",
		]
	},
	"transition": {
		"prefix": [
			"transition",
			"muiTransition"
		],
		"description": "MUI Transition",
		"body": [
			"transition: theme.transitions.create(['$2'], {",
			"duration: $1,",
			"}),",
		]
	},
	"breakPoint": {
		"prefix": [
			"breakPoint",
			"break-point"
		],
		"description": "MUI Breakpoint",
		"body": [
			"[theme.breakpoints.down($1)]: {",
			"",
			"  },",
		]
	},
	"checkDisabled": {
		"prefix": [
			"checkDisabled",
			"disabled"
		],
		"description": "check if should be disabled",
		"body": [
			"const [disabled, setDisabled] = useState(false)",
			"useEffect(() => {",
			"let shouldDisable = Boolean(loggedIn && userId);",
			"setDisabled(!shouldDisable);",
			"}, [loggedIn, userId]);",
		]
	},
	"makeStyles": {
		"prefix": [
			"makeStyles"
		],
		"description": "makeStyles",
		"body": [
			"const ${1:functionName} = makeStyles((theme) => ({",
			"$2",
			"}))"
		]
	},
	"_currentMapStateToProps": {
		"prefix": [
			"_currentMapState"
		],
		"description": "_current_mapState",
		"body": [
			"const mapStateToProps = (state, props) => ({",
			"	UI: state.UI,",
			"	user: state.user,",
			"	alert: state.alert,",
			"	props: props",
			"  });",
			"}))"
		]
	},
	"_currentMapStateToProps": {
		"prefix": [
			"ifWindow"
		],
		"description": "check if window",
		"body": [
			"if(typeof window !== 'undefined') {",
			"$1",
			"}"
		]
	},
}